#!/usr/bin/env node
// 서버를 구동할때 포트를 3000을 사용하겠다는 정보를 나타냄
// node_module : 웹서버에서 사용할 lib들의 집합 (npm install로 설치) (깃에 올릴필요는 없음)
// nodemon 실행
// public/images : 웹페이지에서 사용할 이미지
// public/javascript/config.js : firebase initialize (export하여 app에서 import하여 사용가능)
// public/stylesheets : 글꼴(구글폰트에서 import), 글자가 길때 ...으로 생략 (ellipsis) 하는 등 웹페이지의 가독성을 높여주기 위한 소스
// 40문제

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("web07:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
